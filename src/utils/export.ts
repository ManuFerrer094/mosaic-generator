import html2canvas from 'html2canvas'
import jsPDF from 'jspdf'
import type { MosaicData } from '@/types'

/**
 * Export mosaic as PNG image
 */
export async function exportAsPNG(elementId: string, filename: string = 'lego-mosaic'): Promise<void> {
  try {
    const element = document.getElementById(elementId)
    if (!element) {
      throw new Error('Element not found')
    }

    const canvas = await html2canvas(element, {
      backgroundColor: '#ffffff',
      scale: 2, // Higher quality
      useCORS: true,
    })

    // Create download link
    const link = document.createElement('a')
    link.download = `${filename}.png`
    link.href = canvas.toDataURL('image/png')
    link.click()
  } catch (error) {
    console.error('Error exporting PNG:', error)
    throw new Error('Failed to export PNG')
  }
}

/**
 * Export mosaic and instructions as PDF
 */
export async function exportAsPDF(
  mosaicElementId: string,
  mosaicData: MosaicData,
  filename: string = 'lego-mosaic-instructions'
): Promise<void> {
  try {
    const pdf = new jsPDF('p', 'mm', 'a4')
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    
    // Page 1: Title and Overview
    pdf.setFontSize(24)
    pdf.text('LEGO Mosaic Instructions', pageWidth / 2, 30, { align: 'center' })
    
    pdf.setFontSize(16)
    pdf.text(`Size: ${mosaicData.size}×${mosaicData.size} studs`, 20, 50)
    pdf.text(`Total Pieces: ${mosaicData.totalPieces}`, 20, 60)
    
    // Mosaic preview
    const mosaicElement = document.getElementById(mosaicElementId)
    if (mosaicElement) {
      const canvas = await html2canvas(mosaicElement, {
        backgroundColor: '#ffffff',
        scale: 1,
        useCORS: true,
      })
      
      const imgData = canvas.toDataURL('image/png')
      const imgWidth = 120
      const imgHeight = (canvas.height * imgWidth) / canvas.width
      
      pdf.addImage(imgData, 'PNG', (pageWidth - imgWidth) / 2, 80, imgWidth, imgHeight)
    }

    // Page 2: Piece Count
    pdf.addPage()
    pdf.setFontSize(20)
    pdf.text('Required Pieces', 20, 30)
    
    pdf.setFontSize(12)
    let yPosition = 50
    
    mosaicData.pieceCount.forEach((piece, index) => {
      if (yPosition > pageHeight - 30) {
        pdf.addPage()
        yPosition = 30
      }
      
      // Color square
      pdf.setFillColor(piece.color.hex)
      pdf.rect(20, yPosition - 5, 8, 8, 'F')
      
      // Text
      pdf.setTextColor('#000000')
      pdf.text(`${piece.color.name}: ${piece.count} pieces`, 35, yPosition)
      yPosition += 12
    })

    // Page 3: Base Requirements
    pdf.addPage()
    pdf.setFontSize(20)
    pdf.text('Base Requirements', 20, 30)
    
    pdf.setFontSize(12)
    yPosition = 50
    
    mosaicData.baseRequirements.forEach((base) => {
      pdf.text(`${base.size} ${base.color} Baseplate: ${base.count} piece(s)`, 20, yPosition)
      yPosition += 12
    })

    // Assembly Instructions
    yPosition += 20
    pdf.setFontSize(16)
    pdf.text('Assembly Instructions:', 20, yPosition)
    yPosition += 15
    
    pdf.setFontSize(12)
    const instructions = [
      '1. Arrange your baseplates according to the requirements above',
      '2. Sort your LEGO pieces by color for easy access',
      '3. Start building from one corner, following the mosaic pattern',
      '4. Work row by row to maintain accuracy',
      '5. Press pieces firmly to ensure a secure connection',
      '6. Step back occasionally to check your progress'
    ]
    
    instructions.forEach((instruction) => {
      if (yPosition > pageHeight - 20) {
        pdf.addPage()
        yPosition = 30
      }
      pdf.text(instruction, 20, yPosition)
      yPosition += 10
    })

    // Save the PDF
    pdf.save(`${filename}.pdf`)
  } catch (error) {
    console.error('Error exporting PDF:', error)
    throw new Error('Failed to export PDF')
  }
}

/**
 * Generate a shopping list text for the required pieces
 */
export function generateShoppingList(mosaicData: MosaicData): string {
  let shoppingList = `LEGO Mosaic Shopping List (${mosaicData.size}×${mosaicData.size})\n`
  shoppingList += `===============================================\n\n`
  
  shoppingList += `LEGO Pieces Needed:\n`
  shoppingList += `-------------------\n`
  
  mosaicData.pieceCount.forEach((piece) => {
    shoppingList += `• ${piece.color.name}: ${piece.count} × 1×1 studs\n`
  })
  
  shoppingList += `\nBase Requirements:\n`
  shoppingList += `------------------\n`
  
  mosaicData.baseRequirements.forEach((base) => {
    shoppingList += `• ${base.size} ${base.color} Baseplate: ${base.count} piece(s)\n`
  })
  
  shoppingList += `\nTotal Pieces: ${mosaicData.totalPieces}\n`
  shoppingList += `\nGenerated by Mosaic Maker`
  
  return shoppingList
}

/**
 * Download shopping list as text file
 */
export function downloadShoppingList(mosaicData: MosaicData, filename: string = 'lego-shopping-list'): void {
  const content = generateShoppingList(mosaicData)
  const blob = new Blob([content], { type: 'text/plain' })
  const link = document.createElement('a')
  link.href = URL.createObjectURL(blob)
  link.download = `${filename}.txt`
  link.click()
}